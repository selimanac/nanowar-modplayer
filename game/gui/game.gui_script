local data = require "main.data"

local STATUS_TIME = 200

local left_btn = nil
local right_btn = nil
local fire_btn = nil

function init(self)
	
	local str = string.format("LEVEL %d", data.level)
	msg.post(".", "status", {status = str})
	msg.post(".", "acquire_input_focus")
	self.pulse = 0

	left_btn = gui.get_node("move_left_btn")
	right_btn = gui.get_node("move_right_btn")
	fire_btn = gui.get_node("fire_btn")
end

function update(self, dt)
	local str = string.format("SCORE : %05d", data.score)
	gui.set_text(gui.get_node("score"), str)
	gui.set_scale(gui.get_node("energy"), vmath.vector3(data.energy / 100, 1, 1))

	if data.energy > 20 then
		gui.set_color(gui.get_node("energy"), vmath.vector4(124 / 255, 223 / 255, 30 / 255, 1))
	else
		self.pulse = self.pulse + 0.05
		if self.pulse > 2 then
			self.pulse = 0
		end
		gui.set_color(gui.get_node("energy"), vmath.vector4(187 / 255, 37 / 255, 88 / 255, self.pulse))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("status") then
		gui.set_text(gui.get_node("status"), message.status)
		gui.set_color(gui.get_node("status"), vmath.vector4(124 / 255, 223 / 255, 30 / 255, 1))
		gui.animate(gui.get_node("status"), gui.PROP_COLOR, vmath.vector4(124 / 255, 223 / 255, 30 / 255, 0), gui.EASING_LINEAR, 0.25, 2.0)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mtouch") then
		for i, tpoint in ipairs(action.touch) do
			if gui.pick_node(fire_btn, tpoint.x, tpoint.y) then
				if tpoint.pressed then
					manager.shoot = not manager.shoot
				end
			elseif gui.pick_node(right_btn, tpoint.x, tpoint.y) then
				manager.vel = manager.vel - manager.ACCEL
				if manager.vel < -manager.SPEED then
					manager.vel = -manager.SPEED
				end
			elseif gui.pick_node(left_btn, tpoint.x, tpoint.y) then
				manager.vel = manager.vel + manager.ACCEL
				if manager.vel > manager.SPEED then
					manager.vel = manager.SPEED
				end
			end
		end
	end

end
