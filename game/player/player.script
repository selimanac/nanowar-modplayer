local data = require "main.data"
local music = require "main.music"
local manager = require "game.player.player_manager"

local DRAG = 0.002
local INVUL = 100
local SHOOTWAIT = 10
local MAX_SHOOTSPEED = 5
local DOUBLE_TIME = 25

function init(self)
	manager.ACCEL = 0.004
	manager.SPEED = 0.02
	self.rot = math.pi * 1.5
	self.invul = INVUL * 2
	self.shootwait = 0
	manager.vel = 0
	manager.shoot = false
	self.doubletime = 0
	msg.post(".", "acquire_input_focus")
	data.state = data.STATE_PLAYING
--	player.stop_music(data.game_music)
	music.loadmusic()
	music.playmusic()

end

local function invul(self)
	if self.invul > 0 then
		self.invul = self.invul - 1
		if self.invul == 0 then
			msg.post("#co", "enable")
		elseif self.invul % 6 < 3 then
			sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
		else
			sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 0))
		end
	end
end

local function move(self)
	self.rot = self.rot + manager.vel

	if manager.vel > 0 then
		manager.vel = manager.vel - DRAG
		if manager.vel < 0 then
			manager.vel = 0
		end
	elseif manager.vel < 0 then
		manager.vel = manager.vel + DRAG
		if manager.vel > 0 then
			manager.vel = 0
		end
	end

	if self.rot > math.pi then
		self.rot = self.rot - math.pi * 2
	elseif self.rot < -math.pi then
		self.rot = self.rot + math.pi * 2
	end

	go.set_rotation(vmath.quat_rotation_z(self.rot))
end

local function getoffset(self)
	local pos = vmath.vector3(-math.sin(self.rot - (math.pi / 2)), math.cos(self.rot - (math.pi / 2)), 0)
	pos = pos * 157
	return pos
end

local function laser(self)
	if data.laser then
		local r = math.random(00, 100) / 100
		sprite.set_constant("#laser", "tint", vmath.vector4(1, 1, 1, r))
	else
		sprite.set_constant("#laser", "tint", vmath.vector4(1, 1, 1, 0))
	end
end

local function levelclear(self)
	sound.play("main:/sound#clear")
	msg.post("/common/view#clear", "show", {})
end

local function check(self)
	if data.total == 0 then
		msg.post("#co", "disable")
		levelclear(self)
	end
end

local function shoot(self)
	if self.shootwait == 0 and manager.shoot then
		local pos = getoffset(self)

		factory.create("#shot_factory", pos + go.get_position(), nil, {angle = self.rot + math.pi})

		sound.play("main:/sound#shot", {gain = 0.5})
		self.shootwait = SHOOTWAIT - data.speedup
	end
end

function update(self, dt)
	move(self)
	laser(self)
	if data.state == data.STATE_PLAYING then
		invul(self)
		check(self)
		shoot(self)
	end

	data.playerpos = getoffset(self) + go.get_position()
	if self.shootwait > 0 then
		self.shootwait = self.shootwait - 1
	end
	if self.doubletime > 0 then
		self.doubletime = self.doubletime - 1
	end
end

local function returntomenu(self)
	player.stop_music(data.game_music)
	--	msg.post("main:/sound", "stop_sound", {})
	msg.post("main:/handler", "show_menu")
end

local function input_playing(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		manager.shoot = not manager.shoot
	elseif action_id == hash("left") then
		manager.vel = manager.vel - manager.ACCEL
		if manager.vel < -manager.SPEED then
			manager.vel = -manager.SPEED
		end
	elseif action_id == hash("right") then
		manager.vel = manager.vel + manager.ACCEL
		if manager.vel > manager.SPEED then
			manager.vel = manager.SPEED
		end
	elseif action_id == hash("exit") then
		returntomenu(self)
	elseif action_id == hash("debug") then
	--data.total = 0
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level <= 10 then
			if data.maxlevel < data.level then
				data.maxlevel = data.level
			end
			msg.post("game:/loader", "new_level", {})
		else
			data.maxlevel = 1
			returntomenu(self)
		end
	end
end

local function levelend(self)
	data.level = data.level + 1
	
	if data.level <= 10 then
		if data.maxlevel < data.level then
			data.maxlevel = data.level
		end
		msg.post("game:/loader", "new_level", {})
	else
		data.maxlevel = 1
		returntomenu(self)
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		returntomenu(self)
	end
end

local function input_getready(self, action_id, action)
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
	input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
	input_gameover(self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	end
end

local function hit(self)
	data.energy = data.energy - 10
	if data.energy < 0 then
		data.energy = 0
	end

	if data.energy == 0 then
		data.laser = false
		sprite.set_constant("#sprite", "tint", vmath.vector4(1, 1, 1, 0))
		msg.post("#co", "disable")
		msg.post("/common/explosion", "explode", {pos = data.playerpos})
		msg.post("/common/view#gameover", "show", {})
		sound.play("main:/sound#gameover")
		data.state = data.STATE_GAMEOVER
	else
		self.invul = INVUL
		sound.play("main:/sound#hit")
	end
end

local function pickup(self, type)
	if type == 1 then
		data.energy = data.energy + 20
		if data.energy > 100 then
			data.energy = 100
		end
		msg.post("view#gui", "status", {status = "+20% ENERGY"})
	elseif type == 2 then
		data.laser = true
		msg.post("view#gui", "status", {status = "+LASER SIGHT"})
	elseif type == 3 then
		if data.speedup < MAX_SHOOTSPEED then
			data.speedup = data.speedup + 1
		end
		msg.post("view#gui", "status", {status = "+SHOT SPEEDUP"})
	elseif type == 4 then
		data.score = data.score + 1000
		msg.post("view#gui", "status", {status = "+1000 POINTS"})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("enemy") and self.invul == 0 then
			hit(self)
		end
	elseif message_id == hash("pickup") then
		pickup(self, message.type)
	elseif message_id == hash("returnmain") then
		returntomenu(self)
	elseif message_id == hash("levelclear") then
		print("levelend")
		levelend(self)
	end
end
